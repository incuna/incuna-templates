###############################################################################
## Monit control file
###############################################################################
##
## Start monit in the background (run as a daemon) and check services at 
## 2-minute intervals.
#
set daemon  120
#
## Set syslog logging with the 'daemon' facility. If the FACILITY option is
## omitted, monit will use 'user' facility by default. If you want to log to 
## a stand alone log file instead, specify the path to a log file
#
set logfile syslog facility log_daemon                       
#
#
## Set the list of mail servers for alert delivery. Multiple servers may be 
## specified using comma separator. By default monit uses port 25 - this
## is possible to override with the PORT option.
#
set mailserver localhost               # primary mailserver
#                backup.bar.baz port 10025,  # backup mailserver on port 10025
#                localhost                   # fallback relay
#
#
## By default monit will drop alert events if no mail servers are available. 
## If you want to keep the alerts for a later delivery retry, you can use the 
## EVENTQUEUE statement. The base directory where undelivered alerts will be 
## stored is specified by the BASEDIR option. You can limit the maximal queue
## size using the SLOTS option (if omitted, the queue is limited by space 
## available in the back end filesystem).
#
set eventqueue
    basedir /var/monit  # set the base directory where events will be stored
    slots 100           # optionaly limit the queue size

#
## Monit by default uses the following alert mail format:
##
## --8<--
## From: monit@$HOST                         # sender
## Subject: monit alert --  $EVENT $SERVICE  # subject
##
## $EVENT Service $SERVICE                   #
##                                           #
## 	Date:        $DATE                   #
## 	Action:      $ACTION                 #
## 	Host:        $HOST                   # body
## 	Description: $DESCRIPTION            #
##                                           #
## Your faithful employee,                   #
## monit                                     #
## --8<--
##
## You can override this message format or parts of it, such as subject
## or sender using the MAIL-FORMAT statement. Macros such as $DATE, etc.
## are expanded at runtime. For example, to override the sender:
#
set mail-format { from: monit@$HOST, subject: [$HOST] monit alert --  $EVENT $SERVICE }
#
#
## You can set alert recipients here whom will receive alerts if/when a 
## service defined in this file has errors. Alerts may be restricted on 
## events by using a filter as in the second example below. 
#
set alert admin@incuna.com                       # receive all alerts
# set alert manager@foo.bar only on { timeout }  # receive just service-
#                                                # timeout alert
#
#
#
###############################################################################
## Includes
###############################################################################
##
## It is possible to include additional configuration parts from other files or
## directories.
#
include /etc/monit/services-enabled/*
#
#
#check process apache2 with pidfile /var/run/apache2.pid
#    group apache
#    start program = "/etc/init.d/apache2 start"
#    stop program  = "/etc/init.d/apache2 stop"
#    if cpu > 70% for 5 cycles then alert
#   #if totalmem > 900.0 MB for 5 cycles then alert#
#    if children > 250 then alert
#    if loadavg(5min) greater than 8 for 8 cycles then alert
#    #if failed url http://localhost:8080/ then alert
#    if failed port 8080 protocol http then alert
#    #if 10 restarts within 10 cycles then timeout

#check process django with pidfile /tmp/django-denorm-daemon-pid
#     group denorm
#     start program = "/var/www/biologyolympiad/djangodocs/bin/django denorm_daemon 120"
#     stop program = "/bin/bash -c '/bin/kill `/bin/cat /tmp/django-denorm-daemon-pid`'"
#     if loadavg(5min) greater than 1 for 1 cycles then stop


#check process biologyoly with pidfile /var/www/biologyolympiad/server.pid
#    group fcgi
#    start program = "/home/incuna/bin/fcgictl start /var/www/biologyolympiad"
#    stop program  = "/home/incuna/bin/fcgictl stop /var/www/biologyolympiad"
#    if failed unixsocket /var/www/biologyolympiad/server.sock then start
#    if cpu > 50% for 5 cycles then alert
